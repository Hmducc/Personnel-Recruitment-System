"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createMotionComponent", {
    enumerable: true,
    get: function() {
        return createMotionComponent;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _reactutilities = require("@fluentui/react-utilities");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _useIsReducedMotion = require("../hooks/useIsReducedMotion");
const _useMotionImperativeRef = require("../hooks/useMotionImperativeRef");
const _animate = require("../utils/animate");
const _getChildElement = require("../utils/getChildElement");
function createMotionComponent(motion) {
    const Atom = (props)=>{
        const { children, iterations = 1, imperativeRef } = props;
        const child = (0, _getChildElement.getChildElement)(children);
        const animationRef = (0, _useMotionImperativeRef.useMotionImperativeRef)(imperativeRef);
        const elementRef = _react.useRef();
        const isReducedMotion = (0, _useIsReducedMotion.useIsReducedMotion)();
        (0, _reactutilities.useIsomorphicLayoutEffect)(()=>{
            const element = elementRef.current;
            if (element) {
                const definition = typeof motion === 'function' ? motion(element) : motion;
                const { keyframes, ...options } = definition;
                const animation = (0, _animate.animate)(element, keyframes, {
                    fill: 'forwards',
                    ...options,
                    iterations,
                    ...isReducedMotion() && {
                        duration: 1
                    }
                });
                if (!animation) {
                    return;
                }
                animationRef.current = animation;
                return ()=>{
                    animation.cancel();
                };
            }
        }, [
            animationRef,
            iterations,
            isReducedMotion
        ]);
        return /*#__PURE__*/ _react.cloneElement(children, {
            ref: (0, _reactutilities.useMergedRefs)(elementRef, child.ref)
        });
    };
    return Atom;
}
