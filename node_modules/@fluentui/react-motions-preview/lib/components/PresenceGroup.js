import { _ as _class_private_field_get } from "@swc/helpers/_/_class_private_field_get";
import { _ as _class_private_field_init } from "@swc/helpers/_/_class_private_field_init";
import { _ as _class_private_field_set } from "@swc/helpers/_/_class_private_field_set";
import * as React from 'react';
import { getNextChildMapping } from '../utils/groups/getNextChildMapping';
import { getChildMapping } from '../utils/groups/getChildMapping';
import { PresenceGroupItemProvider } from './PresenceGroupItemProvider';
var _mounted = /*#__PURE__*/ new WeakMap(), _handleExit = /*#__PURE__*/ new WeakMap();
/* eslint-disable @typescript-eslint/explicit-member-accessibility */ /* eslint-disable @typescript-eslint/naming-convention */ export class PresenceGroup extends React.Component {
    static getDerivedStateFromProps(nextProps, { childMapping: prevChildMapping, firstRender }) {
        const nextChildMapping = getChildMapping(nextProps.children);
        return {
            childMapping: firstRender ? nextChildMapping : getNextChildMapping(prevChildMapping, nextChildMapping),
            firstRender: false
        };
    }
    componentDidMount() {
        _class_private_field_set(this, _mounted, true);
    }
    componentWillUnmount() {
        _class_private_field_set(this, _mounted, false);
    }
    render() {
        return /*#__PURE__*/ React.createElement(React.Fragment, null, Object.entries(this.state.childMapping).map(([childKey, childProps])=>/*#__PURE__*/ React.createElement(PresenceGroupItemProvider, {
                ...childProps,
                childKey: childKey,
                key: childKey,
                onExit: _class_private_field_get(this, _handleExit)
            }, childProps.element)));
    }
    constructor(props, context){
        super(props, context);
        _class_private_field_init(this, _mounted, {
            writable: true,
            value: false
        });
        _class_private_field_init(this, _handleExit, {
            writable: true,
            value: (childKey)=>{
                const currentChildMapping = getChildMapping(this.props.children);
                if (childKey in currentChildMapping) {
                    return;
                }
                if (_class_private_field_get(this, _mounted)) {
                    this.setState((state)=>{
                        const childMapping = {
                            ...state.childMapping
                        };
                        delete childMapping[childKey];
                        return {
                            childMapping
                        };
                    });
                }
            }
        });
        this.state = {
            childMapping: {},
            firstRender: true
        };
    }
}
