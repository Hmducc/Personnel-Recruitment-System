import type { EventData } from '@fluentui/react-utilities';
import type { EventHandler } from '@fluentui/react-utilities';
import * as React_2 from 'react';

export declare type AtomMotion = {
    keyframes: Keyframe[];
} & KeyframeEffectOptions;

export declare type AtomMotionFn = (element: HTMLElement) => AtomMotion;

/**
 * Creates a component that will animate the children using the provided motion.
 *
 * @param motion - A motion definition.
 */
export declare function createMotionComponent(motion: AtomMotion | AtomMotionFn): React_2.FC<MotionComponentProps>;

export declare function createPresenceComponent(motion: PresenceMotion | PresenceMotionFn): React_2.FC<PresenceComponentProps>;

export declare const curves: {
    readonly curveAccelerateMax: "cubic-bezier(0.9,0.1,1,0.2)";
    readonly curveAccelerateMid: "cubic-bezier(1,0,1,1)";
    readonly curveAccelerateMin: "cubic-bezier(0.8,0,0.78,1)";
    readonly curveDecelerateMax: "cubic-bezier(0.1,0.9,0.2,1)";
    readonly curveDecelerateMid: "cubic-bezier(0,0,0,1)";
    readonly curveDecelerateMin: "cubic-bezier(0.33,0,0.1,1)";
    readonly curveEasyEaseMax: "cubic-bezier(0.8,0,0.2,1)";
    readonly curveEasyEase: "cubic-bezier(0.33,0,0.67,1)";
    readonly curveLinear: "cubic-bezier(0,0,1,1)";
};

export declare const durations: {
    readonly durationUltraFast: 50;
    readonly durationFaster: 100;
    readonly durationFast: 150;
    readonly durationNormal: 200;
    readonly durationGentle: 250;
    readonly durationSlow: 300;
    readonly durationSlower: 400;
    readonly durationUltraSlow: 500;
};

declare type MotionComponentProps = {
    children: React_2.ReactElement;
    /** Provides imperative controls for the animation. */
    imperativeRef?: React_2.Ref<MotionImperativeRef | undefined>;
    iterations?: number;
};

export declare type MotionImperativeRef = {
    /** Sets the playback rate of the animation, where 1 is normal speed. */
    setPlaybackRate: (rate: number) => void;
    /** Sets the state of the animation to running or paused. */
    setPlayState: (state: 'running' | 'paused') => void;
};

export declare const motionTokens: {
    curveAccelerateMax: "cubic-bezier(0.9,0.1,1,0.2)";
    curveAccelerateMid: "cubic-bezier(1,0,1,1)";
    curveAccelerateMin: "cubic-bezier(0.8,0,0.78,1)";
    curveDecelerateMax: "cubic-bezier(0.1,0.9,0.2,1)";
    curveDecelerateMid: "cubic-bezier(0,0,0,1)";
    curveDecelerateMin: "cubic-bezier(0.33,0,0.1,1)";
    curveEasyEaseMax: "cubic-bezier(0.8,0,0.2,1)";
    curveEasyEase: "cubic-bezier(0.33,0,0.67,1)";
    curveLinear: "cubic-bezier(0,0,1,1)";
    durationUltraFast: 50;
    durationFaster: 100;
    durationFast: 150;
    durationNormal: 200;
    durationGentle: 250;
    durationSlow: 300;
    durationSlower: 400;
    durationUltraSlow: 500;
};

declare type PresenceComponentProps = {
    /**
     * By default, the child component won't execute the "enter" motion when it initially mounts, regardless of the value
     * of "visible". If you desire this behavior, ensure both "appear" and "visible" are set to "true".
     */
    appear?: boolean;
    /** A React element that will be cloned and will have motion effects applied to it. */
    children: React_2.ReactElement;
    /** Provides imperative controls for the animation. */
    imperativeRef?: React_2.Ref<MotionImperativeRef | undefined>;
    onMotionFinish?: EventHandler<PresenceMotionEventData>;
    /** Defines whether a component is visible; triggers the "enter" or "exit" motions. */
    visible?: boolean;
    /**
     * By default, the child component remains mounted after it reaches the "finished" state. Set "unmountOnExit" if
     * you prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit?: boolean;
};

export declare class PresenceGroup extends React_2.Component<PresenceGroupProps, PresenceGroupState> {
    #private;
    static getDerivedStateFromProps(nextProps: PresenceGroupProps, { childMapping: prevChildMapping, firstRender }: PresenceGroupState): {
        childMapping: PresenceGroupChildMapping;
        firstRender: boolean;
    };
    constructor(props: PresenceGroupProps, context: unknown);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
}

declare type PresenceGroupChild = {
    element: React_2.ReactElement;
    appear: boolean;
    visible: boolean;
    unmountOnExit: boolean;
};

declare type PresenceGroupChildMapping = Record<string, PresenceGroupChild>;

declare type PresenceGroupProps = {
    children: React_2.ReactNode;
};

declare type PresenceGroupState = {
    childMapping: PresenceGroupChildMapping;
    firstRender: boolean;
};

export declare type PresenceMotion = {
    enter: AtomMotion;
    exit: AtomMotion;
};

declare type PresenceMotionEventData = EventData<'animation', AnimationPlaybackEvent> & {
    direction: 'enter' | 'exit';
};

export declare type PresenceMotionFn = (element: HTMLElement) => PresenceMotion;

export { }
